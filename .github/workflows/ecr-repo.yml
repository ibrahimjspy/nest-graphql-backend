on:
  push:
    branches: ["develop"]

name: AWS ECR push

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SHAROVE_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SHAROVE_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.SHAROVE_AWS_REPO }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  provision:
    name: provision
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Deploy in EC2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY_KUB  }}
          HOSTNAME: ${{ secrets.HOSTNAME_KUB  }}
          USER_NAME: ${{ secrets.USER_NAME_KUB  }}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            #Now we have got the access of EC2 and we will start the deploy .
            cd /home/ubuntu/sharove-eks/sharove-b2b/middleware
            helm delete middleware-b2b-api
            echo "successfully deleted old version."
            helm install middleware-b2b-api ./helm-middleware
            echo "Successfully deployed new version."
          '
